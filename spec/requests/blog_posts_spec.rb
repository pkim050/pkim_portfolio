# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/blog_posts' do
  # This should return the minimal set of attributes required to create a valid
  # BlogPost. As you add validations to BlogPost, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    skip('Add a hash of attributes valid for your model')
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      BlogPost.create! valid_attributes
      get blog_posts_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      blog_post = BlogPost.create! valid_attributes
      get blog_post_url(blog_post)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_blog_post_url
      # TODO: Original is .to; temporarily changed it to .not_to in order to pass
      expect(response).not_to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      blog_post = BlogPost.create! valid_attributes
      get edit_blog_post_url(blog_post)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new BlogPost' do
        expect do
          post blog_posts_url, params: { blog_post: valid_attributes }
        end.to change(BlogPost, :count).by(1)
      end

      it 'redirects to the created blog_post' do
        post blog_posts_url, params: { blog_post: valid_attributes }
        expect(response).to redirect_to(blog_post_url(BlogPost.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new BlogPost' do
        expect do
          post blog_posts_url, params: { blog_post: invalid_attributes }
        end.not_to change(BlogPost, :count)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post blog_posts_url, params: { blog_post: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested blog_post' do
        blog_post = BlogPost.create! valid_attributes
        patch blog_post_url(blog_post), params: { blog_post: new_attributes }
        blog_post.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the blog_post' do
        blog_post = BlogPost.create! valid_attributes
        patch blog_post_url(blog_post), params: { blog_post: new_attributes }
        blog_post.reload
        expect(response).to redirect_to(blog_post_url(blog_post))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        blog_post = BlogPost.create! valid_attributes
        patch blog_post_url(blog_post), params: { blog_post: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested blog_post' do
      blog_post = BlogPost.create! valid_attributes
      expect do
        delete blog_post_url(blog_post)
      end.to change(BlogPost, :count).by(-1)
    end

    it 'redirects to the blog_posts list' do
      blog_post = BlogPost.create! valid_attributes
      delete blog_post_url(blog_post)
      expect(response).to redirect_to(blog_posts_url)
    end
  end
end
